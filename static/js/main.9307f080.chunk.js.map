{"version":3,"sources":["logo.svg","components/ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ContactForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fields","errors","formIsValid","undefined","name","match","email","phone","setState","e","preventDefault","formValidation","alert","field","target","value","react_default","a","createElement","class","onSubmit","contactSubmit","bind","className","for","type","id","required","placeholder","onChange","handleChange","React","Component","App","components_ContactForm","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9307f080.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass ContactForm extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            fields:{}\n            ,errors:{}\n        }\n    }\n\n    formValidation(){\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n\n        //name validation logic\n        if(!fields['name']){\n            formIsValid = false;\n            errors['name'] = 'Please enter a name!'\n        }\n\n        if(typeof fields['name'] !== undefined){\n            if(!fields.name.match(/^[a-zA-Z ]{2,30}$/)){\n                formIsValid = false;\n                errors.name = 'Only alphabets are allowed in the name field!'\n            }\n        }\n\n        //email validation logic\n        if(!fields.email){\n            formIsValid = false;\n            errors.email = \"Please enter your email id\"\n        }\n\n        if(typeof fields.email !== undefined){\n            if(!fields.email.match(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i)){\n                formIsValid = false;\n                errors.email = 'Please enter a valid email id'\n            }\n        }\n\n        //phone number validation logic\n        if(!fields.phone){\n            formIsValid = false;\n            errors.phone = 'Please enter your phone number'\n        }\n\n        if(typeof fields.phone !==undefined){\n            if(!fields.phone.match(/^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/)){\n                formIsValid = false;\n                errors.phone = 'Please enter a valid phone number'\n            }\n        }\n\n        this.setState({errors: errors});\n        return formIsValid;\n        \n    }\n\n    contactSubmit(e){\n        e.preventDefault();\n\n        if(this.formValidation()){\n            alert(\"Thank you your contact details are submitted succesfully!\")\n        }else{\n            alert(\"Please check submission. Form has errros!\")\n        }\n    }\n\n    handleChange(field, e){\n        let fields = this.state.fields;\n        fields[field] = e.target.value;\n        this.setState({fields});\n    }\n\n    render(){\n        return(\n            <div class=\"container h-100\">\n            <div class=\"row h-100 justify-content-center align-items-center\">\n            <form onSubmit={this.contactSubmit.bind(this)}>\n            <div className='form-group col-md-12'>\n            <label for=\"name\">Name:</label>\n            <input className=\"form-control form-control-plaintext\" type=\"text\" id=\"name\" required placeholder = \"Name\" onChange={this.handleChange.bind(this, 'name')}></input>\n            <small className=\"error\">{this.state.errors[\"name\"]}</small>\n              <br/>\n            </div>\n            <div className=\"form-group col-md-12\">\n            <label for=\"email\">Email:</label>\n            <input className=\"form-control form-control-plaintext\" type=\"email\" id=\"email\" required placeholder=\"Email\" onChange={this.handleChange.bind(this, 'email')}></input>\n            <small className=\"error\">{this.state.errors[\"email\"]}</small>\n              <br/>\n            </div>\n            <div className=\"form-group col-md-12\">\n            <label for=\"phone\">Phone:</label>\n            <input className=\"form-control form-control-plaintext\" type=\"tel\" id=\"phone\" required placeholder=\"Phone Number\" onChange={this.handleChange.bind(this, 'phone')}></input>\n            <small className=\"error\">{this.state.errors[\"phone\"]}</small>\n              <br/>\n            </div>\n            <div className=\"col-md-12 text-center\">\n            <input type='submit' className='btn btn-outline-primary'></input>\n            </div>\n            </form>\n            </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ContactForm;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport ContactForm from './components/ContactForm'\n\nclass App extends Component {\n  render() {\n    return (\n      <ContactForm/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}